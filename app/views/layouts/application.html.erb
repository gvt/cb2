<!DOCTYPE html>

<head>
  <title>Cb2 :: 3D Obj Viewer</title>
  <%= stylesheet_link_tag :all %>
	
	
  <script type="application/x-javascript">
var g_cubeOBJ = "<%= content_for :obj_content %>";
var g_cubeOBJparsed = g_cubeOBJ.split(" ");

var g_ctx;
var g_renderEngine;
var g_testObject;
var g_camera;
var g_clipSpace;
var g_FPSManager;

var g_keyPressed = [];

var g_canvasWidth = 640;
var g_canvasHeight = 480;

var g_MonkeySpin = 0;
var g_frameCount = 0;

function Matrix(){

var tempArray=new Array(4)
var arrayCount;
for (arrayCount=0; arrayCount<4; arrayCount++)
tempArray[arrayCount]=new Array(4)

var rowCount, columnCount;

for (rowCount = 0; rowCount < 4; rowCount++)
    for (columnCount = 0; columnCount < 4; columnCount++)
    {
    	    if (columnCount != rowCount ) {
    	    tempArray[rowCount][columnCount] = 0; 	    
    	    } else {
    	    	tempArray[rowCount][columnCount] = 1;     
    	    }
    	    
    }


return tempArray;
}


function Normal(x,y,z){
	
  this.x = x;
  this.y = y;
  this.z = z;
	
}

function Vertex(x,y,z){

  this.x = x;
  this.y = y;
  this.z = z;
  this.w = 1;

}

function Polygon(verticesArray){
	
	this.vertex = verticesArray;
	//this.color = "rgba(0,0,200, 0.5)";
	this.color = "rgba("+Math.round(Math.random()*255)+", "+Math.round(Math.random()*255)+","+Math.round(Math.random()*255)+", 0.5)";
	
}

function FPSManager(){
 	this.dateNow; 	 
 	this.timeNow;
 	this.timeLater;
 	this.update = function(){
 		
 		this.dateNow = new Date();
 		this.timeNow = this.dateNow.getTime();
        g_ctx.fillText(1000/(this.timeNow-this.timeLater), 10, 50);
         this.timeLater = this.timeNow;

 		
 		
 	}
 	 	 
}

function Object(){
	
	  //this.verticesBuffer = [];
  	  //this.indicesBuffer = [];
  	  this.verticesArray = [];
  	  this.polygonsArray = [];
  	  this.centroidVerticesArray = [];
  	  this.transformMatrix = new Matrix();
  	  this.normalsArray = [];
  	  
  	  
  	  	  
  	  this.computeCentroid = function(){
  	  	  
  	   var averageX, averageY, averageZ;
  	   var polygonCount;
  	   var vertexCount;
  	   
  	   for (polygonCount = 0; polygonCount < this.polygonsArray.length; polygonCount++)
  	   {
  	   	   averageX = 0.0;
  	   	   averageY = 0.0;
  	   	   averageZ = 0.0;
  	   	   
  	   	   for (vertexCount = 0; vertexCount < this.polygonsArray[polygonCount].vertex.length; vertexCount++) {
  	   	   	   averageX += this.polygonsArray[polygonCount].vertex[vertexCount].x;
  	   	   	  averageY += this.polygonsArray[polygonCount].vertex[vertexCount].y;
  	   	   	  averageZ += this.polygonsArray[polygonCount].vertex[vertexCount].z;
  	    
  	   	   }
  	   	  
  	   	   averageX = averageX / this.polygonsArray[polygonCount].vertex.length;
  	   	   averageY = averageY / this.polygonsArray[polygonCount].vertex.length;
  	   	   averageZ = averageZ / this.polygonsArray[polygonCount].vertex.length;
  	    
  	   
  	    this.centroidVerticesArray.push( new Vertex(averageX,averageY,averageZ));
  	   }
  	  	  
  	  }

  	  
  	  
          this.loadOBJ = function(){
          	  
          	  var dataCount;
          	  var verticesCount;
          	  var verticesArray = [];
          	   
          	  for (dataCount = 0; dataCount < g_cubeOBJparsed.length; dataCount++)
          	  {
          	  	  if (g_cubeOBJparsed[dataCount] == "v"){
          	  	   this.verticesArray.push(new Vertex(parseFloat(g_cubeOBJparsed[dataCount+1]),
          	  	   	                              parseFloat(g_cubeOBJparsed[dataCount+2]),
          	  	   	                              parseFloat(g_cubeOBJparsed[dataCount+3])));
          	  	  }
          	  	  
          	  	   if (g_cubeOBJparsed[dataCount] == "f"){
          	  	   	   
          	  	   	      
          	  	   	   verticesArray = [];
          	  	   	   verticesCount = dataCount+1;
          	  	   	   
          	  	   	    while (g_cubeOBJparsed[verticesCount] != "f" && verticesCount < g_cubeOBJparsed.length ) {
          	  	   	       	   
          	  	   	        
          	  	   	    	    verticesArray.push(this.verticesArray[g_cubeOBJparsed[verticesCount]-1]);   
          	  	   	   	verticesCount = verticesCount+1;  
          	  	   	   	
          	  	   	   
          	  	   	        }
          	  	   	        
          	  	   	     this.polygonsArray.push(new Polygon(verticesArray));   
          	  	   	        
          	  	   	   }
          	  	   	   
          	  	   	   
          	  	   	}
         
          	  
          	this.computeCentroid();
          	  
          }
          
  	  
  	  
  
  }
  
function Camera(){
	
	this.transformMatrix = new Matrix(); 
  
  }
  
function RenderEngine(){
   this.clipSpace = new Matrix();
   this.clipSpace = [ [1.305, 0, 0, 0],
   	              [0, 1.740, 0, 0],
   	              [0, 0, 1.002, 1],
   	              [0,0,-2.002, 0]
                     ];
                
   this.render = function(){
   	   
   	 var polygonCount;
 	 var zClip;
         var zDepthOfPolygons = [];
         var zDepthOfPolygonsSorted = [];
         var polygonIndicesDepthSorted = [];
 	 	 
 	 var finalMatrix = MatrixMultiplication(g_testObject.transformMatrix,g_camera.transformMatrix);
 	 
 	 finalMatrix = MatrixMultiplication(finalMatrix, this.clipSpace);
         
 	 for (polygonCount = 0; polygonCount < g_testObject.polygonsArray.length;polygonCount++)
 	 {
 	 	 zClip = g_testObject.centroidVerticesArray[polygonCount].x*finalMatrix[0][2] 
 	 	         + g_testObject.centroidVerticesArray[polygonCount].y*finalMatrix[1][2] 
 	 	         + g_testObject.centroidVerticesArray[polygonCount].z*finalMatrix[2][2] 
 	 	         + g_testObject.centroidVerticesArray[polygonCount].w*finalMatrix[3][2];
 	 	         
 	 	 zDepthOfPolygons.push(zClip);
 	 }
 	 

         zDepthOfPolygonsSorted = zDepthOfPolygons.slice();
         zDepthOfPolygonsSorted.sort(function(a,b){return a - b});
         
         var sortCount, chaosCount;

         for (sortCount = 0; sortCount < zDepthOfPolygonsSorted.length; sortCount++)
         {
          for (chaosCount = 0; chaosCount < zDepthOfPolygons.length; chaosCount++)
          {
          	  if (zDepthOfPolygonsSorted[sortCount] == zDepthOfPolygons[chaosCount])
          	  {
          	   polygonIndicesDepthSorted.push(chaosCount);
          	   zDepthOfPolygons[chaosCount] = 0;
          	  	  
          	  }
          }
         }
 
         var drawingPolygon;
         var xScreen = [];
         var yScreen = [];
         var clipVertex;
         var vertexCount;
          for (polygonCount = 0; polygonCount < polygonIndicesDepthSorted.length;polygonCount++)
 	 {
 	  drawingPolygon = g_testObject.polygonsArray[polygonIndicesDepthSorted[polygonCount]];
 	  xScreen = [];
 	  yScreen = [];
 	  
 	  for (vertexCount = 0; vertexCount < drawingPolygon.vertex.length; vertexCount++)
 	      {
 	      	      clipVertex = vertexMultiplication(drawingPolygon.vertex[vertexCount],finalMatrix);
 	      	      xScreen.push ( (clipVertex.x*g_canvasWidth)/(2*clipVertex.w) + g_canvasWidth/2 );
 	      	      yScreen.push ( (clipVertex.y*g_canvasHeight)/(2*clipVertex.w) + g_canvasHeight/2 );
 	      }
 	      
 	      
 	     this.drawPolygon(xScreen,yScreen,drawingPolygon.color); 
 	      
 	 }
 	 
 	 
 
   	   
   	   
   	   
   }
   
   
   this.drawPolygon = function(xCoords,yCoords, color){
   	   
   	   var coordsCounter = xCoords.length;
   	   
 	 	 g_ctx.fillStyle = color;
 	 	 
 	 	 
         g_ctx.beginPath();
         g_ctx.moveTo(xCoords[0],yCoords[0]);
         for (coordsCounter = 1; coordsCounter < xCoords.length; coordsCounter++) 
             g_ctx.lineTo(xCoords[coordsCounter],yCoords[coordsCounter]);
        
         
         g_ctx.moveTo(xCoords[0],yCoords[0]);
         g_ctx.stroke();
         g_ctx.fill();
         g_ctx.closePath();
          
 	 	 
 	 	 
 	 }
   
   
   
   
  }
  

  

function TranslationMatrix(x,y,z) {
	

var outputMatrix = new Matrix();

outputMatrix[3][0] = x;
outputMatrix[3][1] = y;
outputMatrix[3][2] = z;


    return outputMatrix;
     
}

function vertexMultiplication(vertex,matrix){

var outputVertex = new Vertex(0,0,0);

outputVertex.x = vertex.x*matrix[0][0]+vertex.y*matrix[1][0]+vertex.z*matrix[2][0]+vertex.w*matrix[3][0];
outputVertex.y = vertex.x*matrix[0][1]+vertex.y*matrix[1][1]+vertex.z*matrix[2][1]+vertex.w*matrix[3][1];
outputVertex.z = vertex.x*matrix[0][2]+vertex.y*matrix[1][2]+vertex.z*matrix[2][2]+vertex.w*matrix[3][2];
outputVertex.w = vertex.x*matrix[0][3]+vertex.y*matrix[1][3]+vertex.z*matrix[2][3]+vertex.w*matrix[3][3];

return outputVertex;

}
  
function MatrixMultiplication(MatrixA,MatrixB) {
	
var rowCount, columnCount;
var outputMatrix = new Matrix();

for (rowCount = 0; rowCount < 4; rowCount++)
    for (columnCount = 0; columnCount < 4; columnCount++) {
    	    
    	    outputMatrix[rowCount][columnCount] = MatrixA[rowCount][0]*MatrixB[0][columnCount] +
    	                                          MatrixA[rowCount][1]*MatrixB[1][columnCount] +
    	                                          MatrixA[rowCount][2]*MatrixB[2][columnCount] +
    	                                          MatrixA[rowCount][3]*MatrixB[3][columnCount];
	
    }

    return outputMatrix;
     
}


function RotationXMatrix(angle) {
	

var outputMatrix = new Matrix();


outputMatrix[0][0] = 1;
outputMatrix[0][1] = 0;
outputMatrix[0][2] = 0;
outputMatrix[0][3] = 0;
outputMatrix[1][0] = 0;
outputMatrix[1][1] = Math.cos(angle);
outputMatrix[1][2] = Math.sin(angle);
outputMatrix[1][3] = 0;
outputMatrix[2][0] = 0;
outputMatrix[2][1] = -Math.sin(angle);
outputMatrix[2][2] = Math.cos(angle);
outputMatrix[2][3] = 0;
outputMatrix[3][0] = 0;
outputMatrix[3][1] = 0;
outputMatrix[3][2] = 0;
outputMatrix[3][3] = 1;

return outputMatrix;
     
}


function RotationYMatrix(angle) {
	

var outputMatrix = new Matrix();

outputMatrix[0][0] = Math.cos(angle);
outputMatrix[0][1] = 0;
outputMatrix[0][2] = -Math.sin(angle);
outputMatrix[0][3] = 0;
outputMatrix[1][0] = 0;
outputMatrix[1][1] = 1;
outputMatrix[1][2] = 0;
outputMatrix[1][3] = 0;
outputMatrix[2][0] = Math.sin(angle);
outputMatrix[2][1] = 0;
outputMatrix[2][2] = Math.cos(angle);
outputMatrix[2][3] = 0;
outputMatrix[3][0] = 0;
outputMatrix[3][1] = 0;
outputMatrix[3][2] = 0;
outputMatrix[3][3] = 1;

return outputMatrix;
     
}


function RotationZMatrix(angle) {
	

var outputMatrix = new Matrix();



outputMatrix[0][0] = Math.cos(angle);
outputMatrix[0][1] = Math.sin(angle);
outputMatrix[0][2] = 0;
outputMatrix[0][3] = 0;
outputMatrix[1][0] = -Math.sin(angle);
outputMatrix[1][1] = Math.cos(angle);
outputMatrix[1][2] = 0;
outputMatrix[1][3] = 0;
outputMatrix[2][0] = 0;
outputMatrix[2][1] = 0;
outputMatrix[2][2] = 1;
outputMatrix[2][3] = 0;
outputMatrix[3][0] = 0;
outputMatrix[3][1] = 0;
outputMatrix[3][2] = 0;
outputMatrix[3][3] = 1;


return outputMatrix;
     
}
  
function initialize() {

g_ctx = document.getElementById("canvas").getContext("2d");
//g_ctx.fillStyle = "rgba(0, 0, 200, 0.5)";

g_testObject = new Object();
g_camera = new Camera();
g_FPSManager = new FPSManager();
//g_clipSpace = initializeClipSpace();
//g_FPSManager = new FPSManager();
g_renderEngine = new RenderEngine();

//window.document.onkeypress = onKeyPress;
  window.document.onkeydown = onKeyDown;
  window.document.onkeyup = onKeyUp;

g_testObject.loadOBJ();
  g_testObject.transformMatrix = RotationXMatrix(1.57);
   g_testObject.transformMatrix = MatrixMultiplication(g_testObject.transformMatrix,RotationYMatrix(g_MonkeySpin));
  g_testObject.transformMatrix = MatrixMultiplication(g_testObject.transformMatrix,TranslationMatrix(0,0,-5));
//g_testObject.transformMatrix = TranslationMatrix(0,0,-5);
//g_testObject.transformMatrix = RotationXMatrix(1);
  //g_testObject.transformMatrix = RotationXMatrix(g_testZ);
   //   g_testObject.transformMatrix = MatrixMultiplication(g_testObject.transformMatrix,TranslationMatrix(0,0,-3));
    //  g_camera.transformMatrix = new Matrix();

//g_renderEngine.render();

//60 FPS? Ha, I wish
setInterval(nextFrame, 16.67);
}


function nextFrame() {

        g_frameCount++;
        
        g_ctx.clearRect(0,0,g_canvasWidth,g_canvasHeight);
g_testObject.transformMatrix = new Matrix();
       g_testObject.transformMatrix = RotationXMatrix(1.57);
   g_testObject.transformMatrix = MatrixMultiplication(g_testObject.transformMatrix,RotationYMatrix(g_frameCount/200));
  g_testObject.transformMatrix = MatrixMultiplication(g_testObject.transformMatrix,TranslationMatrix(0,0,-5));
    
      
      
        g_renderEngine.render();
        g_FPSManager.update();
     
     
    }


/**
 * A key is being held down, so handle it
 */
function onKeyDown(event) {
  event = event || window.event;
  g_keyPressed[event.keyCode] = true;
}





/**
 * A key has been released, so handle it
 */
function onKeyUp(event) {
  event = event || window.event;
  g_keyPressed[event.keyCode] = false;
}


  </script>
  
  <style type="text/css">
  	body {
  		margin:10px;
  		font:normal 62.5% verdana,arial,sans-serif;
  	}
  	
  	h1, h2, h3, h4 {
  		margin:0;
  		font-family:arial;
  	}
  	
		a { color:#cd4815;text-decoration:none }
		a:hover {	color:#333 }
  	
  	p {
  		font-size:1.1em
  	}
  	
  	#header {
  		margin-bottom:20px;
  		padding-bottom:10px;
  		border-bottom:solid 1px #000;
  	}
  	
  	h1 {
			margin:20px 0 10px;
			width:226px;height:32px;
			background:url(http://www.canvasdemos.com/wp-content/themes/canvasdemos/library/img/main/h1-logo-small.gif) no-repeat }
		
		h1 a {
			display:block;
			width:451px;height:63px;
			text-indent:-9999em;
			outline:none
		}
		
		h2 {
			font-size:2.2em
		}
		
		h3 {
			margin:10px 0;
			font-size:1.6em
		}
		
		h4 {
			font-size:1.4em
		}
  	
		ul#navigation {
			overflow:hidden;
			margin:10px 0;padding:0;
			width:600px }
		
		ul#navigation li {
			float:left;overflow:hidden;
			margin:0;padding:0;width:84px }
  	
		ul#navigation li a {
			display:block;overflow:hidden;
			margin:0;padding:1px 0; }
  	
  	#footer {
  		margin-top:20px;
  		padding-top:10px;
  		border-top:solid 1px #000;
  	}
  	
  	canvas {
  		border:solid 1px #000;
  	}
  	
  </style>
  
  
</head>
<body onload="initialize();">
	
  <%= yield %>
  
</body>
</html>
